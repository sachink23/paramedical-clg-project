class xhr {
    http = new XMLHttpRequest;
    get(url, fun, info = null) {
        this.http.onreadystatechange = function () {
            if (this.readyState == 4)
                if (info == null)
                    fun(this.status, this.responseText);
                else
                    fun(this.status, this.responseText, info);
            else if (this.readyState == 0)
                if (info == null)
                    fun(0, "Connection Issue");
                else
                    fun(0, "Connection Issue", info);

        }
        this.http.open('get', url, true);
        this.http.setRequestHeader("content-type", "application/x-www-form-urlencoded");
        this.http.send();
    }
    post(url, data, fun, info = null) {
        this.http.onreadystatechange = function () {
            if (this.readyState == 4)
                if (info == null)
                    fun(this.status, this.responseText);
                else
                    fun(this.status, this.responseText, info);
            else if (this.readyState == 0)
                if (info == null)
                    fun(0, "Connection Issue");
                else
                    fun(0, "Connection Issue", info);
        }
        this.http.open('post', url, true);
        this.http.setRequestHeader("content-type", "application/x-www-form-urlencoded");
        this.http.setRequestHeader("cache-control", "no-cache");
        this.http.send(data);
    }
}
class adminClass {
    http = new xhr;
    submitNotifForm() {
        var regexpForUrl = /^(?:(?:https?|ftp):\/\/)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?$/;
        var data = new FormData();
        var type = document.getElementById("selectTypeOfNotif");
        var label = document.getElementById("batchForNotif");
        var text = document.getElementById('notifText');
        if(!((type.value == "D" || type.value == "N") || type.value == "C")) {
            type.classList.add("is-invalid");
            return false;
        } else {
            type.classList.remove("is-invalid");
            data.append('type', type.value);
        }
        if((label.value == "new" || label.value == "imp") || label.value == "na") {
            label.classList.remove("is-invalid");
            data.append('label', label.value);
        } else {
            label.classList.add("is-invalid");
            return false;
        }
        if((text.value.trim()).length > 7) {
            text.classList.remove("is-invalid");
            data.append("text", "text.value");
        } else {
            text.classList.add("is-invalid");
            return false;
        }

        if (document.getElementById("notifFileSelect").value != "") {
            data.append("file", document.getElementById("notifFileSelect").value);
        } else {
            if (document.getElementById("notifUrl").value != "") {
                if (regexpForUrl.test(document.getElementById("notifUrl").value)) {
                    data.append("url", document.getElementById("notifUrl").value);
                    document.getElementById("notifUrl").classList.add("is-valid");
                }
                else {
                    document.getElementById("notifUrl").classList.add("is-invalid");
                }
            }
        }
        
        this.http.post('/sfs', data, admin.listenSubmitNotifForm);

    }
    listenSubmitNotifForm(status, res) {

    }


}
var http = new xhr;
var admin = new adminClass;